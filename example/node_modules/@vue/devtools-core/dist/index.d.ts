import * as mitt from 'mitt';
import { EventType, Handler } from 'mitt';
import { DevToolsType, AppRecord, CustomTab, CustomCommand } from '@vue/devtools-kit';
import { Plugin, Ref } from 'vue';
import { ViteDevServer } from 'vite';

interface BridgeAdapterOptions {
    tracker: (fn: Function) => void;
    trigger: (data: Record<string, any>) => void;
}
type BridgeInstanceType = InstanceType<typeof Bridge>;
declare class Bridge<Events extends Record<EventType, any>, Key extends keyof Events> {
    private emitter;
    private adapter;
    constructor(adapter?: BridgeAdapterOptions);
    private _on;
    private off;
    private _emit;
    on(eventName: Key, handler: Handler<Events[Key]>): () => void;
    once(eventName: Key, handler: Handler<Events[Key]>): void;
    emit(eventName: Key, data?: any): void;
    removeAllListeners(): void;
}

declare function setupAppBridge(bridge: BridgeInstanceType): void;

declare function setupDevToolsBridge(bridge: BridgeInstanceType): void;

declare function defineDevToolsAction<T>(name: string, action: (devtools: DevToolsType, ...args: any[]) => T | Promise<T>): (...args: any[]) => Promise<T>;
declare function defineDevToolsListener<T>(fn: (devtools: DevToolsType, callback: Function) => void, options?: {
    parser?: 'json' | 'devtools';
}): (listener: (payload: T) => void) => () => void;

interface DevToolsPluginOptions {
    bridge: BridgeInstanceType;
    viewMode: 'overlay' | 'panel';
}
type DevtoolsBridgeAppRecord = Pick<AppRecord, 'name' | 'id' | 'version' | 'routerId' | 'moduleDetectives'>;
declare function createDevToolsVuePlugin(pluginOptions: DevToolsPluginOptions): Plugin;
declare function useDevToolsBridge(): Ref<Bridge<Record<mitt.EventType, any>, mitt.EventType>>;
declare function useDevToolsState(): {
    connected: Ref<boolean>;
    clientConnected: Ref<boolean>;
    componentCount: Ref<number>;
    vueVersion: Ref<string>;
    tabs: Ref<CustomTab[]>;
    commands: Ref<CustomCommand[]>;
    vitePluginDetected: Ref<boolean>;
    appRecords: Ref<DevtoolsBridgeAppRecord[]>;
    activeAppRecordId: Ref<string>;
};

declare function prepareInjection(bridge: BridgeInstanceType): void;

declare enum HandShakeEvents {
    SYN = "syn",
    SYN_ACK = "syn-ack",
    ACK = "ack"
}
declare class HandShake {
    socket: BridgeInstanceType;
    constructor(bridge: BridgeInstanceType);
}
declare class HandShakeClient extends HandShake {
    constructor(bridge: BridgeInstanceType);
    onnConnect(): Promise<void>;
}
declare class HandShakeServer extends HandShake {
    constructor(bridge: BridgeInstanceType);
    onnConnect(): Promise<void>;
}

declare function setDevToolsClientUrl(url: string): void;
declare function getDevToolsClientUrl(): any;

declare function initViteClientHotContext(): Promise<void>;
declare function callViteServerAction<T>(name: string): (...args: any[]) => Promise<T>;
declare function defineViteClientListener(name: string): (listener: (...args: any[]) => void) => () => void;

declare function initViteServerContext(context: ViteDevServer): void;
declare function defineViteServerAction(name: string, action: (...args: any[]) => void): void;
declare function callViteClientListener(name: string): (...args: any[]) => Promise<void>;

export { Bridge, type BridgeAdapterOptions, type BridgeInstanceType, type DevToolsPluginOptions, type DevtoolsBridgeAppRecord, HandShakeClient, HandShakeEvents, HandShakeServer, callViteClientListener, callViteServerAction, createDevToolsVuePlugin, defineDevToolsAction, defineDevToolsListener, defineViteClientListener, defineViteServerAction, getDevToolsClientUrl, initViteClientHotContext, initViteServerContext, prepareInjection, setDevToolsClientUrl, setupAppBridge, setupDevToolsBridge, useDevToolsBridge, useDevToolsState };
