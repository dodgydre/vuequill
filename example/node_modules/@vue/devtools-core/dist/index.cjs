"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target4, all) => {
  for (var name in all)
    __defProp(target4, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target4) => (target4 = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target4, "default", { value: mod, enumerable: true }) : target4,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Bridge: () => Bridge,
  HandShakeClient: () => HandShakeClient,
  HandShakeEvents: () => HandShakeEvents,
  HandShakeServer: () => HandShakeServer,
  callViteClientListener: () => callViteClientListener,
  callViteServerAction: () => callViteServerAction,
  createDevToolsVuePlugin: () => createDevToolsVuePlugin,
  defineDevToolsAction: () => defineDevToolsAction,
  defineDevToolsListener: () => defineDevToolsListener,
  defineViteClientListener: () => defineViteClientListener,
  defineViteServerAction: () => defineViteServerAction,
  getDevToolsClientUrl: () => getDevToolsClientUrl,
  initViteClientHotContext: () => initViteClientHotContext,
  initViteServerContext: () => initViteServerContext,
  prepareInjection: () => prepareInjection,
  setDevToolsClientUrl: () => setDevToolsClientUrl,
  setupAppBridge: () => setupAppBridge,
  setupDevToolsBridge: () => setupDevToolsBridge,
  useDevToolsBridge: () => useDevToolsBridge,
  useDevToolsState: () => useDevToolsState
});
module.exports = __toCommonJS(src_exports);

// ../../node_modules/.pnpm/tsup@8.0.2_postcss@8.4.35_typescript@5.3.3/node_modules/tsup/assets/cjs_shims.js
var getImportMetaUrl = () => typeof document === "undefined" ? new URL("file:" + __filename).href : document.currentScript && document.currentScript.src || new URL("main.js", document.baseURI).href;
var importMetaUrl = /* @__PURE__ */ getImportMetaUrl();

// src/vue-plugin.ts
var import_vue = require("vue");

// src/bridge/api.ts
var import_devtools_kit = require("@vue/devtools-kit");
var import_nanoid = require("nanoid");

// src/bridge/shared.ts
var import_devtools_shared = require("@vue/devtools-shared");
var BRIDGE_DEVTOOLS_ACTION_KEY = "devtools:bridge-action";
var BRIDGE_DEVTOOLS_LISTENER_KEY = "devtools:bridge-listener";
var BRIDGE_GLOBAL_VAR_KEY = "__vue_devtools_bridge__";
function getBridgeInstance() {
  return import_devtools_shared.target[BRIDGE_GLOBAL_VAR_KEY];
}
function setBridgeInstance(instance) {
  import_devtools_shared.target[BRIDGE_GLOBAL_VAR_KEY] = instance;
}

// src/bridge/api.ts
function defineDevToolsAction(name, action) {
  return async (...args) => {
    const bridge = getBridgeInstance();
    const uniqueEventKey = (0, import_nanoid.nanoid)();
    return await new Promise((resolve) => {
      bridge.once(uniqueEventKey, (e) => {
        resolve(e);
      });
      bridge.emit(BRIDGE_DEVTOOLS_ACTION_KEY, {
        name,
        key: uniqueEventKey,
        action: `${action}`,
        args
      });
    });
  };
}
function defineDevToolsListener(fn, options = {}) {
  return (listener) => {
    const {
      parser = "devtools"
    } = options;
    const parserFn = parser === "devtools" ? import_devtools_kit.parse : JSON.parse;
    const bridge = getBridgeInstance();
    const uniqueEventKey = (0, import_nanoid.nanoid)();
    const off = bridge.on(uniqueEventKey, (e) => {
      listener(parserFn(e));
    });
    bridge.emit(BRIDGE_DEVTOOLS_LISTENER_KEY, {
      key: uniqueEventKey,
      action: `${fn}`,
      parser
    });
    return off;
  };
}

// src/vue-plugin.ts
function initDevToolsState() {
  const connected = (0, import_vue.ref)(false);
  const clientConnected = (0, import_vue.ref)(false);
  const componentCount = (0, import_vue.ref)(0);
  const vueVersion = (0, import_vue.ref)("");
  const tabs = (0, import_vue.ref)([]);
  const commands = (0, import_vue.ref)([]);
  const vitePluginDetected = (0, import_vue.ref)(false);
  const appRecords = (0, import_vue.ref)([]);
  const activeAppRecordId = (0, import_vue.ref)("");
  function init() {
    const getDevToolsState = defineDevToolsAction("devtools:get-state", (devtools4) => {
      var _a, _b;
      return {
        connected: devtools4.state.connected,
        clientConnected: devtools4.state.clientConnected,
        vueVersion: ((_b = (_a = devtools4.state) == null ? void 0 : _a.activeAppRecord) == null ? void 0 : _b.version) || "",
        tabs: devtools4.state.tabs,
        commands: devtools4.state.commands,
        vitePluginDetected: devtools4.state.vitePluginDetected,
        appRecords: devtools4.state.appRecords.map((item) => ({
          id: item.id,
          name: item.name,
          version: item.version,
          routerId: item.routerId,
          moduleDetectives: item.moduleDetectives
        })),
        activeAppRecordId: devtools4.state.activeAppRecordId
      };
    });
    const onDevToolsStateUpdated = defineDevToolsListener((devtools4, callback) => {
      function setPayload(payload) {
        var _a;
        return {
          vueVersion: ((_a = payload == null ? void 0 : payload.activeAppRecord) == null ? void 0 : _a.version) || "",
          connected: payload.connected,
          clientConnected: payload.clientConnected,
          tabs: payload.tabs,
          commands: payload.commands,
          vitePluginDetected: payload.vitePluginDetected,
          appRecords: payload.appRecords.map((item) => ({
            id: item.id,
            name: item.name,
            version: item.version,
            routerId: item.routerId,
            moduleDetectives: item.moduleDetectives
          })),
          activeAppRecordId: payload.activeAppRecordId
        };
      }
      function subscribe() {
        devtools4.api.on.devtoolsStateUpdated((payload) => {
          callback(setPayload(payload));
        });
      }
      if (devtools4 == null ? void 0 : devtools4.api) {
        subscribe();
      } else {
        const timer = setInterval(() => {
          if (devtools4.state.connected) {
            const payload = devtools4.state;
            callback(setPayload(payload));
            subscribe();
            clearInterval(timer);
          }
        }, 10);
      }
    });
    getDevToolsState().then((data) => {
      connected.value = data.connected;
      clientConnected.value = data.clientConnected;
      vueVersion.value = data.vueVersion || "";
      tabs.value = data.tabs;
      commands.value = data.commands;
      vitePluginDetected.value = data.vitePluginDetected;
      appRecords.value = data.appRecords;
      activeAppRecordId.value = data.activeAppRecordId;
    });
    onDevToolsStateUpdated((data) => {
      connected.value = data.connected;
      clientConnected.value = data.clientConnected;
      vueVersion.value = data.vueVersion || "";
      tabs.value = data.tabs;
      commands.value = data.commands;
      vitePluginDetected.value = data.vitePluginDetected;
      appRecords.value = data.appRecords;
      activeAppRecordId.value = data.activeAppRecordId;
    });
  }
  return {
    init,
    restore: init,
    vueVersion,
    connected,
    clientConnected,
    componentCount,
    tabs,
    commands,
    vitePluginDetected,
    appRecords,
    activeAppRecordId
  };
}
function initDevToolsBridge(_bridge) {
  const bridge = (0, import_vue.ref)(_bridge);
  function restore(_bridge2) {
    bridge.value = _bridge2;
  }
  return {
    bridge,
    restore
  };
}
var VueDevToolsBridgeSymbol = Symbol("VueDevToolsBridgeSymbol");
var VueDevToolsStateSymbol = Symbol("VueDevToolsStateSymbol");
function createDevToolsVuePlugin(pluginOptions) {
  return {
    install(app, options) {
      const { bridge: _bridge, viewMode: _viewMode } = pluginOptions;
      const viewMode = (0, import_vue.ref)(_viewMode);
      const state = initDevToolsState();
      const bridgeContext = initDevToolsBridge(_bridge);
      state.init();
      app.provide(VueDevToolsBridgeSymbol, bridgeContext.bridge);
      app.provide(VueDevToolsStateSymbol, state);
      app.provide("viewMode", viewMode);
      bridgeContext.bridge.value.on("toggle-view-mode", (v) => {
        viewMode.value = v;
      });
      app.config.globalProperties.__VUE_DEVTOOLS_UPDATE__ = (_bridge2) => {
        bridgeContext.restore(_bridge2);
        state.restore();
      };
    }
  };
}
function useDevToolsBridge() {
  return (0, import_vue.inject)(VueDevToolsBridgeSymbol);
}
function useDevToolsState() {
  return (0, import_vue.inject)(VueDevToolsStateSymbol);
}

// src/injection.ts
var import_devtools_kit4 = require("@vue/devtools-kit");

// src/bridge/app.ts
var import_devtools_kit2 = require("@vue/devtools-kit");
function setupAppBridge(bridge) {
  bridge.on(BRIDGE_DEVTOOLS_ACTION_KEY, async (payload) => {
    const action = new Function("devtools", "...args", `return (${payload.action})(devtools, ...args)`);
    const result = await action(import_devtools_kit2.devtools, ...payload.args);
    bridge.emit(payload.key, result);
  });
  bridge.on(BRIDGE_DEVTOOLS_LISTENER_KEY, async (payload) => {
    const action = new Function(`return ${payload.action}`);
    const callback = action();
    callback(import_devtools_kit2.devtools, (res) => {
      const stringifyFn = payload.parser === "devtools" ? import_devtools_kit2.stringify : JSON.stringify;
      bridge.emit(payload.key, stringifyFn(res));
    });
  });
}

// src/bridge/devtools.ts
function setupDevToolsBridge(bridge) {
  setBridgeInstance(bridge);
}

// src/bridge/core.ts
var import_devtools_shared2 = require("@vue/devtools-shared");
var import_mitt = __toESM(require("mitt"), 1);
var Bridge = class {
  constructor(adapter = {
    tracker: import_devtools_shared2.NOOP,
    trigger: import_devtools_shared2.NOOP
  }) {
    this.emitter = (0, import_mitt.default)();
    this.adapter = adapter;
    this.adapter.tracker((message) => {
      this._emit(message.event, message.data);
    });
  }
  _on(eventName, handler) {
    this.emitter.on(eventName, handler);
  }
  off(eventName, handler) {
    this.emitter.off(eventName, handler);
  }
  _emit(eventName, data) {
    this.emitter.emit(eventName, data);
  }
  on(eventName, handler) {
    this._on(eventName, handler);
    return () => this.off(eventName, handler);
  }
  once(eventName, handler) {
    const onceHandler = (...args) => {
      handler(...args);
      this.off(eventName, onceHandler);
    };
    this._on(eventName, onceHandler);
  }
  emit(eventName, data) {
    this.adapter.trigger({
      event: eventName,
      data
    });
    this._emit(eventName, data);
  }
  removeAllListeners() {
    this.emitter.all.clear();
  }
};

// src/handshake.ts
var import_devtools_kit3 = require("@vue/devtools-kit");
var HandShakeEvents = /* @__PURE__ */ ((HandShakeEvents2) => {
  HandShakeEvents2["SYN"] = "syn";
  HandShakeEvents2["SYN_ACK"] = "syn-ack";
  HandShakeEvents2["ACK"] = "ack";
  return HandShakeEvents2;
})(HandShakeEvents || {});
var HandShake = class {
  constructor(bridge) {
    this.socket = bridge;
  }
};
var HandShakeClient = class extends HandShake {
  constructor(bridge) {
    super(bridge);
  }
  onnConnect() {
    return new Promise((resolve) => {
      this.socket.emit("syn" /* SYN */);
      const timer = setInterval(() => {
        this.socket.emit("syn" /* SYN */);
      }, 300);
      this.socket.on("syn-ack" /* SYN_ACK */, () => {
        clearInterval(timer);
        this.socket.emit("ack" /* ACK */);
        import_devtools_kit3.devtools.state.clientConnected = true;
        resolve();
      });
    });
  }
};
var HandShakeServer = class extends HandShake {
  constructor(bridge) {
    super(bridge);
  }
  onnConnect() {
    return new Promise((resolve) => {
      this.socket.on("syn" /* SYN */, () => {
        this.socket.emit("syn-ack" /* SYN_ACK */);
        const timer = setInterval(() => {
          this.socket.emit("syn-ack" /* SYN_ACK */);
        }, 300);
        this.socket.on("ack" /* ACK */, () => {
          clearInterval(timer);
          resolve();
        });
      });
    });
  }
};

// src/injection.ts
function prepareInjection(bridge) {
  setupAppBridge(bridge);
  new HandShakeClient(bridge).onnConnect().then(() => {
    bridge.on("devtools:client-ready", () => {
      (0, import_devtools_kit4.onDevToolsConnected)(() => {
        import_devtools_kit4.devtools.state.connected = true;
      });
    });
  });
}

// src/client.ts
var import_devtools_shared3 = require("@vue/devtools-shared");
function setDevToolsClientUrl(url) {
  import_devtools_shared3.target.__VUE_DEVTOOLS_CLIENT_URL__ = url;
}
function getDevToolsClientUrl() {
  var _a;
  return (_a = import_devtools_shared3.target.__VUE_DEVTOOLS_CLIENT_URL__) != null ? _a : (() => {
    if (import_devtools_shared3.isBrowser) {
      const devtoolsMeta = document.querySelector("meta[name=__VUE_DEVTOOLS_CLIENT_URL__]");
      if (devtoolsMeta)
        return devtoolsMeta.getAttribute("content");
    }
    return "";
  })();
}

// ../../node_modules/.pnpm/vite-hot-client@0.2.3_vite@5.1.4/node_modules/vite-hot-client/dist/index.mjs
async function getViteClient(base = "/", warning = true) {
  var _a;
  try {
    const url = `${base}@vite/client`;
    const res = await fetch(url);
    const text = await res.text();
    if (text.startsWith("<") || !((_a = res.headers.get("content-type")) == null ? void 0 : _a.includes("javascript")))
      throw new Error("Not javascript");
    return await import(
      /* @vite-ignore */
      url
    );
  } catch (e) {
    if (warning)
      console.error(`[vite-hot-client] Failed to import "${base}@vite/client"`);
  }
  return void 0;
}

// src/vite-bridge/client.ts
var import_nanoid2 = require("nanoid");

// src/vite-bridge/shared.ts
var import_devtools_shared4 = require("@vue/devtools-shared");
var VITE_CLIENT_HOT_CONTEXT = "vite:client-hot-context";
var VITE_SERVER_CONTEXT = "vite:server";
function getViteClientHotContext() {
  return import_devtools_shared4.target[VITE_CLIENT_HOT_CONTEXT];
}
function setViteClientHotContext(context) {
  import_devtools_shared4.target[VITE_CLIENT_HOT_CONTEXT] = context;
}
function getViteServerContext() {
  return import_devtools_shared4.target[VITE_SERVER_CONTEXT];
}
function setViteServerContext(context) {
  import_devtools_shared4.target[VITE_SERVER_CONTEXT] = context;
}

// src/vite-bridge/client.ts
async function getViteHotContext() {
  var _a;
  if ((_a = importMetaUrl) == null ? void 0 : _a.includes("chrome-extension://"))
    return;
  const viteCLient = await getViteClient(`${location.pathname.split("/__devtools__")[0] || ""}/`.replace(/\/\//g, "/"), false);
  return viteCLient == null ? void 0 : viteCLient.createHotContext("/____");
}
async function initViteClientHotContext() {
  const context = await getViteHotContext();
  context && setViteClientHotContext(context);
}
function callViteServerAction(name) {
  return async (...args) => {
    const viteClient = getViteClientHotContext();
    const uniqueEventKey = (0, import_nanoid2.nanoid)();
    return new Promise((resolve) => {
      const cb = (e) => {
        viteClient.off(uniqueEventKey, cb);
        resolve(e);
      };
      viteClient.on(uniqueEventKey, cb);
      viteClient.send(name, {
        key: uniqueEventKey,
        payload: args
      });
    });
  };
}
function defineViteClientListener(name) {
  return (listener) => {
    const viteClient = getViteClientHotContext();
    viteClient.on(name, listener);
    return () => {
      viteClient.off(name, listener);
    };
  };
}

// src/vite-bridge/server.ts
function initViteServerContext(context) {
  setViteServerContext(context);
}
function defineViteServerAction(name, action) {
  var _a;
  const viteServer = getViteServerContext();
  const ws = (_a = viteServer.hot) != null ? _a : viteServer.ws;
  ws.on(name, async ({ key, payload }) => {
    const res = await action(...payload);
    ws.send(key, res);
  });
}
function callViteClientListener(name) {
  return async (...args) => {
    var _a;
    const viteServer = getViteServerContext();
    const ws = (_a = viteServer.hot) != null ? _a : viteServer.ws;
    ws.send(name, ...args);
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Bridge,
  HandShakeClient,
  HandShakeEvents,
  HandShakeServer,
  callViteClientListener,
  callViteServerAction,
  createDevToolsVuePlugin,
  defineDevToolsAction,
  defineDevToolsListener,
  defineViteClientListener,
  defineViteServerAction,
  getDevToolsClientUrl,
  initViteClientHotContext,
  initViteServerContext,
  prepareInjection,
  setDevToolsClientUrl,
  setupAppBridge,
  setupDevToolsBridge,
  useDevToolsBridge,
  useDevToolsState
});
