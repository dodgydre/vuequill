// src/vue-plugin.ts
import { inject, ref } from "vue";

// src/bridge/api.ts
import { parse } from "@vue/devtools-kit";
import { nanoid } from "nanoid";

// src/bridge/shared.ts
import { target } from "@vue/devtools-shared";
var BRIDGE_DEVTOOLS_ACTION_KEY = "devtools:bridge-action";
var BRIDGE_DEVTOOLS_LISTENER_KEY = "devtools:bridge-listener";
var BRIDGE_GLOBAL_VAR_KEY = "__vue_devtools_bridge__";
function getBridgeInstance() {
  return target[BRIDGE_GLOBAL_VAR_KEY];
}
function setBridgeInstance(instance) {
  target[BRIDGE_GLOBAL_VAR_KEY] = instance;
}

// src/bridge/api.ts
function defineDevToolsAction(name, action) {
  return async (...args) => {
    const bridge = getBridgeInstance();
    const uniqueEventKey = nanoid();
    return await new Promise((resolve) => {
      bridge.once(uniqueEventKey, (e) => {
        resolve(e);
      });
      bridge.emit(BRIDGE_DEVTOOLS_ACTION_KEY, {
        name,
        key: uniqueEventKey,
        action: `${action}`,
        args
      });
    });
  };
}
function defineDevToolsListener(fn, options = {}) {
  return (listener) => {
    const {
      parser = "devtools"
    } = options;
    const parserFn = parser === "devtools" ? parse : JSON.parse;
    const bridge = getBridgeInstance();
    const uniqueEventKey = nanoid();
    const off = bridge.on(uniqueEventKey, (e) => {
      listener(parserFn(e));
    });
    bridge.emit(BRIDGE_DEVTOOLS_LISTENER_KEY, {
      key: uniqueEventKey,
      action: `${fn}`,
      parser
    });
    return off;
  };
}

// src/vue-plugin.ts
function initDevToolsState() {
  const connected = ref(false);
  const clientConnected = ref(false);
  const componentCount = ref(0);
  const vueVersion = ref("");
  const tabs = ref([]);
  const commands = ref([]);
  const vitePluginDetected = ref(false);
  const appRecords = ref([]);
  const activeAppRecordId = ref("");
  function init() {
    const getDevToolsState = defineDevToolsAction("devtools:get-state", (devtools4) => {
      var _a, _b;
      return {
        connected: devtools4.state.connected,
        clientConnected: devtools4.state.clientConnected,
        vueVersion: ((_b = (_a = devtools4.state) == null ? void 0 : _a.activeAppRecord) == null ? void 0 : _b.version) || "",
        tabs: devtools4.state.tabs,
        commands: devtools4.state.commands,
        vitePluginDetected: devtools4.state.vitePluginDetected,
        appRecords: devtools4.state.appRecords.map((item) => ({
          id: item.id,
          name: item.name,
          version: item.version,
          routerId: item.routerId,
          moduleDetectives: item.moduleDetectives
        })),
        activeAppRecordId: devtools4.state.activeAppRecordId
      };
    });
    const onDevToolsStateUpdated = defineDevToolsListener((devtools4, callback) => {
      function setPayload(payload) {
        var _a;
        return {
          vueVersion: ((_a = payload == null ? void 0 : payload.activeAppRecord) == null ? void 0 : _a.version) || "",
          connected: payload.connected,
          clientConnected: payload.clientConnected,
          tabs: payload.tabs,
          commands: payload.commands,
          vitePluginDetected: payload.vitePluginDetected,
          appRecords: payload.appRecords.map((item) => ({
            id: item.id,
            name: item.name,
            version: item.version,
            routerId: item.routerId,
            moduleDetectives: item.moduleDetectives
          })),
          activeAppRecordId: payload.activeAppRecordId
        };
      }
      function subscribe() {
        devtools4.api.on.devtoolsStateUpdated((payload) => {
          callback(setPayload(payload));
        });
      }
      if (devtools4 == null ? void 0 : devtools4.api) {
        subscribe();
      } else {
        const timer = setInterval(() => {
          if (devtools4.state.connected) {
            const payload = devtools4.state;
            callback(setPayload(payload));
            subscribe();
            clearInterval(timer);
          }
        }, 10);
      }
    });
    getDevToolsState().then((data) => {
      connected.value = data.connected;
      clientConnected.value = data.clientConnected;
      vueVersion.value = data.vueVersion || "";
      tabs.value = data.tabs;
      commands.value = data.commands;
      vitePluginDetected.value = data.vitePluginDetected;
      appRecords.value = data.appRecords;
      activeAppRecordId.value = data.activeAppRecordId;
    });
    onDevToolsStateUpdated((data) => {
      connected.value = data.connected;
      clientConnected.value = data.clientConnected;
      vueVersion.value = data.vueVersion || "";
      tabs.value = data.tabs;
      commands.value = data.commands;
      vitePluginDetected.value = data.vitePluginDetected;
      appRecords.value = data.appRecords;
      activeAppRecordId.value = data.activeAppRecordId;
    });
  }
  return {
    init,
    restore: init,
    vueVersion,
    connected,
    clientConnected,
    componentCount,
    tabs,
    commands,
    vitePluginDetected,
    appRecords,
    activeAppRecordId
  };
}
function initDevToolsBridge(_bridge) {
  const bridge = ref(_bridge);
  function restore(_bridge2) {
    bridge.value = _bridge2;
  }
  return {
    bridge,
    restore
  };
}
var VueDevToolsBridgeSymbol = Symbol("VueDevToolsBridgeSymbol");
var VueDevToolsStateSymbol = Symbol("VueDevToolsStateSymbol");
function createDevToolsVuePlugin(pluginOptions) {
  return {
    install(app, options) {
      const { bridge: _bridge, viewMode: _viewMode } = pluginOptions;
      const viewMode = ref(_viewMode);
      const state = initDevToolsState();
      const bridgeContext = initDevToolsBridge(_bridge);
      state.init();
      app.provide(VueDevToolsBridgeSymbol, bridgeContext.bridge);
      app.provide(VueDevToolsStateSymbol, state);
      app.provide("viewMode", viewMode);
      bridgeContext.bridge.value.on("toggle-view-mode", (v) => {
        viewMode.value = v;
      });
      app.config.globalProperties.__VUE_DEVTOOLS_UPDATE__ = (_bridge2) => {
        bridgeContext.restore(_bridge2);
        state.restore();
      };
    }
  };
}
function useDevToolsBridge() {
  return inject(VueDevToolsBridgeSymbol);
}
function useDevToolsState() {
  return inject(VueDevToolsStateSymbol);
}

// src/injection.ts
import { devtools as devtools3, onDevToolsConnected } from "@vue/devtools-kit";

// src/bridge/app.ts
import { devtools, stringify } from "@vue/devtools-kit";
function setupAppBridge(bridge) {
  bridge.on(BRIDGE_DEVTOOLS_ACTION_KEY, async (payload) => {
    const action = new Function("devtools", "...args", `return (${payload.action})(devtools, ...args)`);
    const result = await action(devtools, ...payload.args);
    bridge.emit(payload.key, result);
  });
  bridge.on(BRIDGE_DEVTOOLS_LISTENER_KEY, async (payload) => {
    const action = new Function(`return ${payload.action}`);
    const callback = action();
    callback(devtools, (res) => {
      const stringifyFn = payload.parser === "devtools" ? stringify : JSON.stringify;
      bridge.emit(payload.key, stringifyFn(res));
    });
  });
}

// src/bridge/devtools.ts
function setupDevToolsBridge(bridge) {
  setBridgeInstance(bridge);
}

// src/bridge/core.ts
import { NOOP } from "@vue/devtools-shared";
import mitt from "mitt";
var Bridge = class {
  constructor(adapter = {
    tracker: NOOP,
    trigger: NOOP
  }) {
    this.emitter = mitt();
    this.adapter = adapter;
    this.adapter.tracker((message) => {
      this._emit(message.event, message.data);
    });
  }
  _on(eventName, handler) {
    this.emitter.on(eventName, handler);
  }
  off(eventName, handler) {
    this.emitter.off(eventName, handler);
  }
  _emit(eventName, data) {
    this.emitter.emit(eventName, data);
  }
  on(eventName, handler) {
    this._on(eventName, handler);
    return () => this.off(eventName, handler);
  }
  once(eventName, handler) {
    const onceHandler = (...args) => {
      handler(...args);
      this.off(eventName, onceHandler);
    };
    this._on(eventName, onceHandler);
  }
  emit(eventName, data) {
    this.adapter.trigger({
      event: eventName,
      data
    });
    this._emit(eventName, data);
  }
  removeAllListeners() {
    this.emitter.all.clear();
  }
};

// src/handshake.ts
import { devtools as devtools2 } from "@vue/devtools-kit";
var HandShakeEvents = /* @__PURE__ */ ((HandShakeEvents2) => {
  HandShakeEvents2["SYN"] = "syn";
  HandShakeEvents2["SYN_ACK"] = "syn-ack";
  HandShakeEvents2["ACK"] = "ack";
  return HandShakeEvents2;
})(HandShakeEvents || {});
var HandShake = class {
  constructor(bridge) {
    this.socket = bridge;
  }
};
var HandShakeClient = class extends HandShake {
  constructor(bridge) {
    super(bridge);
  }
  onnConnect() {
    return new Promise((resolve) => {
      this.socket.emit("syn" /* SYN */);
      const timer = setInterval(() => {
        this.socket.emit("syn" /* SYN */);
      }, 300);
      this.socket.on("syn-ack" /* SYN_ACK */, () => {
        clearInterval(timer);
        this.socket.emit("ack" /* ACK */);
        devtools2.state.clientConnected = true;
        resolve();
      });
    });
  }
};
var HandShakeServer = class extends HandShake {
  constructor(bridge) {
    super(bridge);
  }
  onnConnect() {
    return new Promise((resolve) => {
      this.socket.on("syn" /* SYN */, () => {
        this.socket.emit("syn-ack" /* SYN_ACK */);
        const timer = setInterval(() => {
          this.socket.emit("syn-ack" /* SYN_ACK */);
        }, 300);
        this.socket.on("ack" /* ACK */, () => {
          clearInterval(timer);
          resolve();
        });
      });
    });
  }
};

// src/injection.ts
function prepareInjection(bridge) {
  setupAppBridge(bridge);
  new HandShakeClient(bridge).onnConnect().then(() => {
    bridge.on("devtools:client-ready", () => {
      onDevToolsConnected(() => {
        devtools3.state.connected = true;
      });
    });
  });
}

// src/client.ts
import { isBrowser, target as target2 } from "@vue/devtools-shared";
function setDevToolsClientUrl(url) {
  target2.__VUE_DEVTOOLS_CLIENT_URL__ = url;
}
function getDevToolsClientUrl() {
  var _a;
  return (_a = target2.__VUE_DEVTOOLS_CLIENT_URL__) != null ? _a : (() => {
    if (isBrowser) {
      const devtoolsMeta = document.querySelector("meta[name=__VUE_DEVTOOLS_CLIENT_URL__]");
      if (devtoolsMeta)
        return devtoolsMeta.getAttribute("content");
    }
    return "";
  })();
}

// ../../node_modules/.pnpm/vite-hot-client@0.2.3_vite@5.1.4/node_modules/vite-hot-client/dist/index.mjs
async function getViteClient(base = "/", warning = true) {
  var _a;
  try {
    const url = `${base}@vite/client`;
    const res = await fetch(url);
    const text = await res.text();
    if (text.startsWith("<") || !((_a = res.headers.get("content-type")) == null ? void 0 : _a.includes("javascript")))
      throw new Error("Not javascript");
    return await import(
      /* @vite-ignore */
      url
    );
  } catch (e) {
    if (warning)
      console.error(`[vite-hot-client] Failed to import "${base}@vite/client"`);
  }
  return void 0;
}

// src/vite-bridge/client.ts
import { nanoid as nanoid2 } from "nanoid";

// src/vite-bridge/shared.ts
import { target as target3 } from "@vue/devtools-shared";
var VITE_CLIENT_HOT_CONTEXT = "vite:client-hot-context";
var VITE_SERVER_CONTEXT = "vite:server";
function getViteClientHotContext() {
  return target3[VITE_CLIENT_HOT_CONTEXT];
}
function setViteClientHotContext(context) {
  target3[VITE_CLIENT_HOT_CONTEXT] = context;
}
function getViteServerContext() {
  return target3[VITE_SERVER_CONTEXT];
}
function setViteServerContext(context) {
  target3[VITE_SERVER_CONTEXT] = context;
}

// src/vite-bridge/client.ts
var import_meta = {};
async function getViteHotContext() {
  var _a;
  if ((_a = import_meta.url) == null ? void 0 : _a.includes("chrome-extension://"))
    return;
  const viteCLient = await getViteClient(`${location.pathname.split("/__devtools__")[0] || ""}/`.replace(/\/\//g, "/"), false);
  return viteCLient == null ? void 0 : viteCLient.createHotContext("/____");
}
async function initViteClientHotContext() {
  const context = await getViteHotContext();
  context && setViteClientHotContext(context);
}
function callViteServerAction(name) {
  return async (...args) => {
    const viteClient = getViteClientHotContext();
    const uniqueEventKey = nanoid2();
    return new Promise((resolve) => {
      const cb = (e) => {
        viteClient.off(uniqueEventKey, cb);
        resolve(e);
      };
      viteClient.on(uniqueEventKey, cb);
      viteClient.send(name, {
        key: uniqueEventKey,
        payload: args
      });
    });
  };
}
function defineViteClientListener(name) {
  return (listener) => {
    const viteClient = getViteClientHotContext();
    viteClient.on(name, listener);
    return () => {
      viteClient.off(name, listener);
    };
  };
}

// src/vite-bridge/server.ts
function initViteServerContext(context) {
  setViteServerContext(context);
}
function defineViteServerAction(name, action) {
  var _a;
  const viteServer = getViteServerContext();
  const ws = (_a = viteServer.hot) != null ? _a : viteServer.ws;
  ws.on(name, async ({ key, payload }) => {
    const res = await action(...payload);
    ws.send(key, res);
  });
}
function callViteClientListener(name) {
  return async (...args) => {
    var _a;
    const viteServer = getViteServerContext();
    const ws = (_a = viteServer.hot) != null ? _a : viteServer.ws;
    ws.send(name, ...args);
  };
}
export {
  Bridge,
  HandShakeClient,
  HandShakeEvents,
  HandShakeServer,
  callViteClientListener,
  callViteServerAction,
  createDevToolsVuePlugin,
  defineDevToolsAction,
  defineDevToolsListener,
  defineViteClientListener,
  defineViteServerAction,
  getDevToolsClientUrl,
  initViteClientHotContext,
  initViteServerContext,
  prepareInjection,
  setDevToolsClientUrl,
  setupAppBridge,
  setupDevToolsBridge,
  useDevToolsBridge,
  useDevToolsState
};
